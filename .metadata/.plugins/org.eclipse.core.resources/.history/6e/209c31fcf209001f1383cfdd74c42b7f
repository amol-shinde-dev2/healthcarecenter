package com.vyom.vyomlib.controller;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
//import org.springframework.security.access.prepost.PreAuthorize;
/*import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;*/
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.vyom.vyomlib.dto.APIResponse;
import com.vyom.vyomlib.dto.AuthRequest;
import com.vyom.vyomlib.dto.UserModel;
import com.vyom.vyomlib.entity.User;
import com.vyom.vyomlib.jwt.JwtService;
import com.vyom.vyomlib.service.RoleService;
import com.vyom.vyomlib.service.UserService;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/user")
public class UserController {

	@Autowired
	UserService userservice;
	
	@Autowired
	RoleService roleservice;

	 @Autowired
	    private JwtService jwtService; 
	  
	    @Autowired
	    private AuthenticationManager authenticationManager; 
	
	
	@RequestMapping("/create")
	public ResponseEntity<?> createUser(@RequestBody UserModel usermodel) {
		
		 	User createdUser=userservice.create(usermodel);
		 	return ResponseEntity.status(HttpStatus.OK).body(createdUser);
				
	}
	
	@PostMapping("/createth")
	public ResponseEntity<?> createThousandUser() {
		UserModel um;
		for(int i =0;i<1000;i++) {
			
			
			um=new UserModel(null, null, null)
		 	User createdUser=userservice.create(um);}
		 	return ResponseEntity.status(HttpStatus.OK).body(userservice.getAll());
				
	}
	
	@RequestMapping("/currentuser")
	public ResponseEntity<?> getCurrentUser(Principal princ)
	{
		return ResponseEntity.status(HttpStatus.OK).body(princ.getName());
		
		
	}
	
	@RequestMapping("/get/{id}")
	public ResponseEntity<?> getUser(@PathVariable("id") Long id) {
		
		return 	ResponseEntity.status(HttpStatus.OK).body(userservice.get(id));
				
	}
	
	@CrossOrigin(origins = "http://localhost:4200")
	@RequestMapping("/getall")
	public ResponseEntity<List<User>> getAll(){

		return new ResponseEntity<> (userservice.getAll(), HttpStatus.OK);
	}
	
	@RequestMapping("/update")
	
	public ResponseEntity<?> updateUser(@RequestBody User user){
		
		
		return ResponseEntity.status(HttpStatus.OK).body(userservice.updateUser(user));
		
		
	}
	
	@RequestMapping("/delete/{id}")
	public String deleteUser(@PathVariable("id") Long id) {
		
		return userservice.deleteUser(id);
	}
	
	@RequestMapping("/generateToken") 
    public ResponseEntity<String> authenticateAndGetToken(@RequestBody AuthRequest authRequest) { 
		
        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword())); 
        if (authentication.isAuthenticated()) { 
            return  ResponseEntity.status(HttpStatus.OK).body(jwtService.generateToken(authRequest.getUsername())); 
        } else { 
            throw new UsernameNotFoundException("invalid user request !"); 
        } 
    } 
	
}